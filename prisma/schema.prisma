model Session {
  key          String @id
  session_data Json
}

model Vehicle {
  id       Int         @id @default(autoincrement())
  veh_no   String
  veh_type VehicleType
  to       TO          @relation(fields: [toId], references: [id])
  toId     Int
}

model TO {
  id                  Int             @id @default(autoincrement())
  name                String          @unique
  contact             String          @unique
  next_of_kin_name    String          @unique
  next_of_kin_contact String          @unique
  rank                String
  vehicles            Vehicle[]
  book_out            BookOutTiming[]
  updateHistory       UpdateHistory[]
  notification        Notification[]
}

model UpdateHistory {
  id            Int      @id @default(autoincrement())
  toId          Int
  updatedByTo   Int?
  updatedByUser Int?
  fields        Json
  beforeValues  Json
  afterValues   Json
  updatedAt     DateTime
  to            TO       @relation(fields: [toId], references: [id])
  User          User?    @relation(fields: [userId], references: [id])
  userId        Int?
}

model BookOutTiming {
  id       Int      @id @default(autoincrement())
  book_out DateTime
  book_in  DateTime
  comments String?
  to       TO       @relation(fields: [toId], references: [id])
  toId     Int
  status Status
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String          @unique
  name          String          @unique
  updateHistory UpdateHistory[]
  notification  Notification[]
}

model Notification {
  id      Int              @id @default(autoincrement())
  toId    Int?
  adminId Int? // assuming that Admin details are stored in User model
  message String
  sentAt  DateTime
  to      TO?              @relation(fields: [toId], references: [id])
  admin   User?            @relation(fields: [adminId], references: [id])
  type    NotificationType
}

enum NotificationType {
  BOOK_OUT_REQUEST
  BOOK_OUT_APPROVAL
}

enum VehicleType {
  SOUV
  OUV
  FIVETON
  CP
  FSD
  PSD
  GP
}

enum Deferred {
  DEFERRED
  PRESENT
}

enum Status {
  PENDING   
  APPROVED
  REJECTED
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}
